"use client";

import React, { useState, useEffect, useCallback, useRef } from "react";
import { useQuery } from "@tanstack/react-query";
import {
	UserData,
	WorkAuthData,
	UserSaveData,
	usrApiService,
	CodeData,
} from "@/modules/usr/services/usr-api.service";
import "../designs/common.css";
import COMZ100P00, { EmpSearchModalRef } from "@/app/com/COMZ100P00";
import { useToast } from "@/contexts/ToastContext";

/**
 * USR2010M00 - ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ ÌôîÎ©¥
 *
 * Ï£ºÏöî Í∏∞Îä•:
 * - ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Î∞è Îì±Î°ù/ÏàòÏ†ï
 * - Î≥∏Î∂Ä/Î∂ÄÏÑúÎ≥Ñ ÏÇ¨Ïö©Ïûê ÌïÑÌÑ∞ÎßÅ
 * - ÏÇ¨Ïö©Ïûê Í∂åÌïú Î∞è ÏßÅÏ±Ö Í¥ÄÎ¶¨
 * - ÏóÖÎ¨¥Î≥Ñ ÏÇ¨Ïö©Í∂åÌïú ÏÑ§Ï†ï
 * - ÏäπÏù∏Í≤∞Ïû¨Ïûê ÏßÄÏ†ï
 * - ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî
 *
 * Ïó∞Í¥Ä ÌÖåÏù¥Î∏î:
 * - ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ (ÏÇ¨Î≤à, ÏÑ±Î™Ö, Î≥∏Î∂Ä, Î∂ÄÏÑú, ÏßÅÍ∏â, ÏßÅÏ±Ö Îì±)
 * - ÏÇ¨Ïö©Ïûê Í∂åÌïú (ÏÇ¨Ïö©ÏûêÍ∂åÌïú, ÏÇ¨Ïö©ÏûêÏó≠Ìï†)
 * - ÏóÖÎ¨¥Î≥Ñ ÏÇ¨Ïö©Í∂åÌïú (ÏÇ¨ÏóÖÍ¥ÄÎ¶¨, ÌîÑÎ°úÏ†ùÌä∏Í¥ÄÎ¶¨, ÏóÖÎ¨¥Ï∂îÏßÑÎπÑÍ¥ÄÎ¶¨, Ïù∏ÏÇ¨Í¥ÄÎ¶¨, ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨)
 * - ÏäπÏù∏Í≤∞Ïû¨Ïûê Ï†ïÎ≥¥
 *
 * Ïó∞Í¥Ä ÌîÑÎ°úÏãúÏ†Ä:
 * - USR_01_0201_S: ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå (Î≥∏Î∂Ä/Î∂ÄÏÑú/ÏÇ¨Ïö©ÏûêÎ™Ö Ï°∞Í±¥)
 * - USR_01_0202_S: ÏóÖÎ¨¥Î≥Ñ ÏÇ¨Ïö©Í∂åÌïú Î™©Î°ù Ï°∞Ìöå (ÏÇ¨Ïö©ÏûêID Í∏∞Ï§Ä)
 * - USR_01_0203_T: ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû• (Ïã†Í∑ú/ÏàòÏ†ï)
 * - USR_01_0104_T: ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî
 * - COM_03_0101_S: Í≥µÌÜµÏΩîÎìú Ï°∞Ìöå (Î≥∏Î∂Ä, Î∂ÄÏÑú, Í∂åÌïú, ÏßÅÏ±ÖÍµ¨Î∂Ñ, ÏóÖÎ¨¥Í∂åÌïú Îì±)
 * - COM_03_0201_S: Î∂ÄÏÑúÏΩîÎìú Ï°∞Ìöå (Î≥∏Î∂ÄÎ≥Ñ Î∂ÄÏÑú Î™©Î°ù)
 */

const initialSearch = { hqDiv: "ALL", deptDiv: "ALL", userNm: "" };

const initialFormData = {
	empNo: "",
	empNm: "",
	authCd: "",
	dutyDivCd: "",
	apvApofId: "",
	apvApofNm: "",
	usrRoleId: "",
};

const USR2010M00: React.FC = () => {
	const { showToast, showConfirm } = useToast();
	const [searchParams, setSearchParams] = useState(initialSearch);
	const [selectedUser, setSelectedUser] = useState<UserData | null>(null);
	const [editedUser, setEditedUser] = useState<Partial<UserSaveData>>({});
	const [workAuthList, setWorkAuthList] = useState<WorkAuthData[]>([]);
	const [selectedWorkAuthCode, setSelectedWorkAuthCode] = useState<string>("");
	const [workAuthAction, setWorkAuthAction] = useState<"1" | "0">("1");
	const [formData, setFormData] = useState(initialFormData);

	const [potentialApprovers, setPotentialApprovers] = useState<any[]>([]); // COMZ100P00 Ìò∏ÌôòÏùÑ ÏúÑÌï¥ any[]
	const [isApproverPopupOpen, setIsApproverPopupOpen] = useState(false);
	const empSearchModalRef = useRef<EmpSearchModalRef>(null);

	const [hqCodeList, setHqCodeList] = useState<CodeData[]>([]);
	const [deptCodeList, setDeptCodeList] = useState<CodeData[]>([]);
	const [authCodeList, setAuthCodeList] = useState<CodeData[]>([]);
	const [dutyDivCodeList, setDutyDivCodeList] = useState<CodeData[]>([]);
	const [workAuthCodeList, setWorkAuthCodeList] = useState<CodeData[]>([]);
	const [userRoleList, setUserRoleList] = useState<
		{ usrRoleId: string; usrRoleNm: string }[]
	>([]);

	const { data: userData, refetch: refetchUserList } = useQuery<UserData[]>({
		queryKey: ["userList", searchParams],
		queryFn: () => usrApiService.getUserList(searchParams),
	});

	const { data: hqData } = useQuery<CodeData[]>({
		queryKey: ["hqCodes"],
		queryFn: () => usrApiService.getHqDivCodes(),
	});
	const { data: deptData } = useQuery<CodeData[]>({
		queryKey: ["deptCodes"],
		queryFn: () => Promise.resolve([{ data: "ALL", label: "Ï†ÑÏ≤¥" }]),
	});
	const { data: authData } = useQuery<CodeData[]>({
		queryKey: ["authCodes"],
		queryFn: () => usrApiService.getAuthCodes(),
	});
	const { data: dutyDivData } = useQuery<CodeData[]>({
		queryKey: ["dutyDivCodes"],
		queryFn: () => usrApiService.getDutyDivCodes(),
	});
	const { data: workAuthData } = useQuery<CodeData[]>({
		queryKey: ["workAuthCodes"],
		queryFn: () => usrApiService.getCodes("991"),
	});
	const { data: rolesData } = useQuery({
		queryKey: ["userRoles"],
		queryFn: () => usrApiService.getUserRoles(),
	});

	useEffect(() => {
		if (hqData) setHqCodeList(hqData);
		if (deptData) setDeptCodeList(deptData);
		if (authData) setAuthCodeList(authData);
		if (dutyDivData) setDutyDivCodeList(dutyDivData);
		if (workAuthData) setWorkAuthCodeList(workAuthData);
		if (rolesData) setUserRoleList(rolesData);
	}, [hqData, deptData, authData, dutyDivData, workAuthData, rolesData]);

	useEffect(() => {
		if (userData) {
			// ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Í≤∞Í≥ºÍ∞Ä ÏûàÏùÑ Îïå
			if (userData.length === 0) {
				setSelectedUser(null);
				setFormData(initialFormData);
				setEditedUser({});
			}

			// Flex ÏÜåÏä§ÏôÄ ÎèôÏùºÌïòÍ≤å ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Í≤∞Í≥ºÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥ Ìï≠ÏÉÅ ÏóÖÎ¨¥Í∂åÌïú Ï°∞Ìöå
			usrApiService
				.getWorkAuthList("")
				.then((list) => {
					setWorkAuthList(list);
				})
				.catch((error) => {
					console.error("ÏóÖÎ¨¥Í∂åÌïú Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:", error);
					// ÏóêÎü¨ Î∞úÏÉù Ïãú Í∏∞Î≥∏ ÏóÖÎ¨¥Í∂åÌïú Î™©Î°ù ÏÑ§Ï†ï
					const defaultWorkAuthList = [
						{ smlCsfCd: "01", smlCsfNm: "ÏÇ¨ÏóÖÍ¥ÄÎ¶¨", wrkUseYn: "0", rmk: "" },
						{
							smlCsfCd: "02",
							smlCsfNm: "ÌîÑÎ°úÏ†ùÌä∏Í¥ÄÎ¶¨",
							wrkUseYn: "0",
							rmk: "",
						},
						{
							smlCsfCd: "03",
							smlCsfNm: "ÏóÖÎ¨¥Ï∂îÏßÑÎπÑÍ¥ÄÎ¶¨",
							wrkUseYn: "0",
							rmk: "",
						},
						{ smlCsfCd: "05", smlCsfNm: "Ïù∏ÏÇ¨Í¥ÄÎ¶¨", wrkUseYn: "0", rmk: "" },
						{ smlCsfCd: "06", smlCsfNm: "ÏãúÏä§ÌÖúÍ¥ÄÎ¶¨", wrkUseYn: "0", rmk: "" },
					];
					setWorkAuthList(defaultWorkAuthList);
				});
		}
	}, [userData]);

	// ÏóÖÎ¨¥Í∂åÌïú ÏΩ§Î≥¥Î∞ïÏä§ Î≥ÄÍ≤Ω Ïãú ÎùºÎîîÏò§ Î≤ÑÌäº ÏÉÅÌÉú ÎèôÍ∏∞Ìôî
	useEffect(() => {
		if (selectedWorkAuthCode) {
			const selectedAuth = workAuthList.find(
				(auth) => auth.smlCsfCd === selectedWorkAuthCode
			);
			if (selectedAuth) {
				setWorkAuthAction(selectedAuth.wrkUseYn as "1" | "0");
			}
		}
	}, [selectedWorkAuthCode, workAuthList]);

	const handleSearchParamChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
	) => {
		const { name, value } = e.target;
		setSearchParams((prev) => ({ ...prev, [name]: value }));

		// Î≥∏Î∂Ä Î≥ÄÍ≤Ω Ïãú Î∂ÄÏÑú ÏΩ§Î≥¥ ÏóÖÎç∞Ïù¥Ìä∏
		if (name === "hqDiv") {
			// Î∂ÄÏÑúÎ•º 'ALL'Î°ú Ï¥àÍ∏∞Ìôî
			setSearchParams((prev) => ({ ...prev, deptDiv: "ALL" }));

			if (value === "ALL") {
				// Î≥∏Î∂ÄÍ∞Ä "Ï†ÑÏ≤¥"Ïùº ÎïåÎäî Î∂ÄÏÑú ÏΩ§Î≥¥Ïóê "Ï†ÑÏ≤¥"Îßå ÌëúÏãú
				setDeptCodeList([{ data: "ALL", label: "Ï†ÑÏ≤¥" }]);
			} else {
				// ÌäπÏ†ï Î≥∏Î∂Ä ÏÑ†ÌÉù Ïãú Ìï¥Îãπ Î≥∏Î∂ÄÏùò Î∂ÄÏÑú Î™©Î°ù Ï°∞Ìöå
				usrApiService
					.getDeptDivCodesByHq(value)
					.then((deptList) => {
						setDeptCodeList(deptList);
					})
					.catch((error) => {
						console.error("Î≥∏Î∂ÄÎ≥Ñ Î∂ÄÏÑú Ï°∞Ìöå Ïã§Ìå®:", error);
						// Ïã§Ìå® Ïãú "Ï†ÑÏ≤¥"Îßå ÌëúÏãú
						setDeptCodeList([{ data: "ALL", label: "Ï†ÑÏ≤¥" }]);
					});
			}
		}
	};

	const handleSearch = () => {
		refetchUserList();
	};

	const handleUserSelect = (user: UserData) => {
		setSelectedUser(user);
		setFormData({
			empNo: user.empNo,
			empNm: user.empNm,
			authCd: user.authCd,
			dutyDivCd: user.dutyDivCd,
			apvApofId: user.apvApofId,
			apvApofNm: user.apvApofNm,
			usrRoleId: user.usrRoleId,
		});
		const initialEditedUser: Partial<UserSaveData> = {
			empNo: user.empNo,
			empNm: user.empNm,
			authCd: user.authCd,
			dutyDivCd: user.dutyDivCd,
			apvApofId: user.apvApofId,
			apvApofNm: user.apvApofNm, // ÏäπÏù∏Í≤∞Ïû¨Ïûê Ï∂îÍ∞Ä
			emailAddr: user.emailAddr,
			usrRoleId: user.usrRoleId,
		};

		usrApiService.getWorkAuthList(user.empNo).then((list) => {
			setWorkAuthList(list);
			setEditedUser({ ...initialEditedUser, workAuthList: list });
			// ÏóÖÎ¨¥Í∂åÌïú ÏΩ§Î≥¥Î∞ïÏä§ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
			if (list.length > 0) {
				setSelectedWorkAuthCode(list[0].smlCsfCd);
			}
		});
	};

	const handleUserInputChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
	) => {
		const { name, value } = e.target;
		setEditedUser((prev) => ({ ...prev, [name]: value }));
	};

	const handleWorkAuthChange = (action: "1" | "0") => {
		if (!selectedWorkAuthCode) {
			showToast("ÏàòÏ†ïÌï† ÏóÖÎ¨¥Í∂åÌïúÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.", "warning");
			return;
		}

		console.log("üîç handleWorkAuthChange Ìò∏Ï∂ú:");
		console.log("  - selectedWorkAuthCode:", selectedWorkAuthCode);
		console.log("  - action:", action);
		console.log("  - ÌòÑÏû¨ workAuthList:", workAuthList);

		const updatedList = workAuthList.map((auth) =>
			auth.smlCsfCd === selectedWorkAuthCode
				? { ...auth, wrkUseYn: action }
				: auth
		);

		console.log("  - ÏóÖÎç∞Ïù¥Ìä∏Îêú workAuthList:", updatedList);

		setWorkAuthList(updatedList);
		setEditedUser((prev) => ({ ...prev, workAuthList: updatedList }));
	};

	// useEffect Ï†úÍ±∞ - Î¨¥Ìïú Î£®ÌîÑ Î∞©ÏßÄ

	const proceedWithSave = async (approver: { id: string; name: string }) => {
		showConfirm({
			message: "Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
			type: "info",
			onConfirm: async () => {
				// ÌòÑÏû¨ ÏóÖÎ¨¥Í∂åÌïú Î™©Î°ùÏóêÏÑú Î∂ÄÏó¨Îêú Í∂åÌïúÎßå ÌïÑÌÑ∞ÎßÅ
				const currentWorkAuthList = editedUser.workAuthList || workAuthList;
				console.log("üîç Ï†ÄÏû•Ìï† ÏóÖÎ¨¥Í∂åÌïú Î™©Î°ù:", currentWorkAuthList);

				const saveData: UserSaveData = {
					...selectedUser!,
					...editedUser,
					apvApofId: approver.id,
					apvApofNm: approver.name,
					workAuthList: currentWorkAuthList,
					regUserId: "SYSTEM", // TODO: Ïã§Ï†ú Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê IDÎ°ú Î≥ÄÍ≤Ω ÌïÑÏöî
				};

				try {
					await usrApiService.saveUser(saveData);
					showToast("ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.", "info");

					// Ï†ÄÏû• ÌõÑ ÏÇ¨Ïö©Ïûê Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
					console.log("üîç Ï†ÄÏû• ÌõÑ ÏÇ¨Ïö©Ïûê Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®...");
					await refetchUserList();

					// ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÎã§Î©¥ ÏóÖÎç∞Ïù¥Ìä∏Îêú Ï†ïÎ≥¥Î°ú Îã§Ïãú ÏÑ§Ï†ï
					if (selectedUser) {
						console.log("üîç ÏÑ†ÌÉùÎêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏...");
						const updatedUserList =
							await usrApiService.getUserList(searchParams);
						const updatedUser = updatedUserList.find(
							(u) => u.empNo === selectedUser.empNo
						);
						if (updatedUser) {
							console.log("üîç ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:", updatedUser);
							handleUserSelect(updatedUser);
						}
					}
				} catch (error) {
					console.error("Failed to save user:", error);
					showToast(
						`Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${(error as Error).message}`,
						"error"
					);
				}
			},
		});
	};

	const handleSave = async () => {
		if (!selectedUser || !editedUser.empNo) {
			showToast("Ï†ÄÏû•Ìï† ÏÇ¨Ïö©ÏûêÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", "warning");
			return;
		}

		if (!editedUser.apvApofNm) {
			showToast("ÏäπÏù∏Í≤∞Ïû¨ÏûêÎ•º ÏûÖÎ†•Ìï¥ Ï£ºÏã≠ÏãúÏöî.", "warning");
			return;
		}

		if (!editedUser.authCd) {
			showToast("ÏÇ¨Ïö©ÏûêÍ∂åÌïúÏùÑ ÏÑ†ÌÉùÌï¥ Ï£ºÏã≠ÏãúÏöî.", "warning");
			return;
		}

		if (!editedUser.dutyDivCd) {
			showToast("ÏßÅÏ±ÖÍµ¨Î∂ÑÏùÑ ÏÑ†ÌÉùÌï¥ Ï£ºÏã≠ÏãúÏöî.", "warning");
			return;
		}

		try {
			const approvers = await usrApiService.getUserList({
				hqDiv: "ALL",
				deptDiv: "ALL",
				userNm: editedUser.apvApofNm,
			});

			if (approvers.length === 0) {
				showToast(
					"ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Ïóê ÎØ∏Îì±Î°ùÎêú ÏäπÏù∏Í≤∞Ïû¨Ïûê ÏûÖÎãàÎã§. ÏäπÏù∏Í≤∞Ïû¨ÏûêÎ•º Îã§Ïãú ÏûÖÎ†•Ìï¥ Ï£ºÏã≠ÏãúÏöî.",
					"warning"
				);
				return;
			} else if (approvers.length === 1) {
				const approver = approvers[0];
				if (approver.authCd !== "10" && approver.authCd !== "00") {
					showToast(
						"ÏäπÏù∏Í≤∞Ïû¨ÏûêÎäî Î∂ÄÏÑúÏû• Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.\nÏû¨ ÏûÖÎ†• Ìï¥ Ï£ºÏã≠ÏãúÏöî.",
						"warning"
					);
					return;
				}
				// ÏäπÏù∏Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Ï†ÄÏû• ÏßÑÌñâ
				setEditedUser((prev) => ({
					...prev,
					apvApofId: approver.empNo,
					apvApofNm: approver.empNm,
				}));
				proceedWithSave({ id: approver.empNo, name: approver.empNm });
			} else {
				// Ïó¨Îü¨ Î™ÖÏùº Í≤ΩÏö∞ ÌåùÏóÖ Ïó¥Í∏∞
				setPotentialApprovers(
					approvers.map((a, i) => ({ ...a, LIST_NO: i + 1 }))
				);
				setIsApproverPopupOpen(true);
			}
		} catch (error) {
			console.error("Failed to search approver:", error);
			showToast(
				`ÏäπÏù∏Í≤∞Ïû¨Ïûê Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${(error as Error).message}`,
				"error"
			);
		}
	};

	const handleApproverSelect = (approver: {
		empNo: string;
		empNm: string;
		authCd: string;
	}) => {
		if (approver.authCd !== "10" && approver.authCd !== "00") {
			showToast(
				"ÏäπÏù∏Í≤∞Ïû¨ÏûêÎäî Î∂ÄÏÑúÏû• Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.\nÎã§Î•∏ ÏÇ¨ÎûåÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.",
				"warning"
			);
			// COMZ100P00ÏóêÏÑúÎäî ÌåùÏóÖÏùÑ Îã´ÏßÄ ÏïäÍ≥† Îã§Ïãú ÏÑ†ÌÉùÏùÑ Ïú†ÎèÑÌïòÍ∏∞ Ïñ¥Î†§Ïö∞ÎØÄÎ°ú,
			// ÏùºÎã® ÌåùÏóÖÏùÑ Îã´Í≥† ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïû¨ÏãúÎèÑÎ•º ÏïàÎÇ¥Ìï©ÎãàÎã§.
			setIsApproverPopupOpen(false);
			return;
		}

		setEditedUser((prev) => ({
			...prev,
			apvApofId: approver.empNo,
			apvApofNm: approver.empNm,
		}));
		setIsApproverPopupOpen(false); // ÌåùÏóÖ Îã´Í∏∞
		// Ï†ÄÏû• Î°úÏßÅ ÏßÑÌñâ
		proceedWithSave({ id: approver.empNo, name: approver.empNm });
	};

	const handlePasswordReset = async () => {
		if (!selectedUser) {
			showToast("ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï¥àÍ∏∞ÌôîÌï† ÏÇ¨Ïö©ÏûêÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", "warning");
			return;
		}

		showConfirm({
			message: `'${selectedUser.empNm}'ÎãòÏùò ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
			type: "info",
			onConfirm: async () => {
				try {
					const resultMessage = await usrApiService.initPassword(
						selectedUser.empNo
					);
					showToast(resultMessage, "info");
				} catch (error) {
					console.error("Failed to reset password:", error);
					showToast(
						`ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${(error as Error).message}`,
						"error"
					);
				}
			},
		});
	};

	return (
		<div className='mdi'>
			{isApproverPopupOpen && (
				<COMZ100P00
					ref={empSearchModalRef}
					defaultEmpNm={editedUser.apvApofNm || ""}
					defaultEmpList={potentialApprovers}
					onSelect={handleApproverSelect}
					onClose={() => setIsApproverPopupOpen(false)}
				/>
			)}
			{/* ÏÉÅÎã® Í≤ÄÏÉâ ÏòÅÏó≠ */}
			<div className='search-div mb-4'>
				<table className='search-table'>
					<tbody>
						<tr className='search-tr'>
							<th className='search-th w-[70px]'>Î≥∏Î∂Ä</th>
							<td className='search-td w-[180px]'>
								<select
									name='hqDiv'
									onChange={handleSearchParamChange}
									className='combo-base'
									id='searchHqDiv'
								>
									<option value='ALL'>Ï†ÑÏ≤¥</option>
									{hqCodeList.map((item) => (
										<option key={item.data} value={item.data}>
											{item.label}
										</option>
									))}
								</select>
							</td>
							<th className='search-th w-[70px]'>Î∂ÄÏÑú</th>
							<td className='search-td w-[180px]'>
								<select
									name='deptDiv'
									onChange={handleSearchParamChange}
									className='combo-base'
									id='searchDeptDiv'
								>
									{deptCodeList.map((item) => (
										<option key={item.data} value={item.data}>
											{item.label}
										</option>
									))}
								</select>
							</td>
							<th className='search-th w-[90px]'>ÏÇ¨Ïö©ÏûêÎ™Ö</th>
							<td className='search-td w-[180px]'>
								<input
									name='userNm'
									onChange={handleSearchParamChange}
									type='text'
									className='input-base input-default'
									id='searchUserNm'
								/>
							</td>
							<td className='search-td text-right' colSpan={2}>
								<button onClick={handleSearch} className='btn-base btn-search'>
									Ï°∞Ìöå
								</button>
							</td>
						</tr>
					</tbody>
				</table>
			</div>

			{/* ÏÇ¨Ïö©Ïûê Î™©Î°ù Í∑∏Î¶¨Îìú */}
			<div
				className='gridbox-div mb-4'
				style={{ height: "400px", overflow: "auto" }}
			>
				<table className='grid-table'>
					<thead>
						<tr>
							<th className='grid-th'>ÏÇ¨Î≤à</th>
							<th className='grid-th'>ÏÑ±Î™Ö</th>
							<th className='grid-th'>Î≥∏Î∂ÄÎ™Ö</th>
							<th className='grid-th'>Î∂ÄÏÑúÎ™Ö</th>
							<th className='grid-th'>ÏßÅÍ∏âÎ™Ö</th>
							<th className='grid-th'>ÏßÅÏ±ÖÍµ¨Î∂Ñ</th>
							<th className='grid-th'>ÏÇ¨Ïö©ÏûêÍ∂åÌïú</th>
							<th className='grid-th'>ÏÇ¨Ïö©ÏûêÏó≠Ìï†ID</th>
							<th className='grid-th'>ÏÇ¨Ïö©ÏûêÏó≠Ìï†</th>
							<th className='grid-th'>ÏäπÏù∏Í≤∞Ïû¨Ïûê</th>
							<th className='grid-th'>ÏÇ¨ÏóÖ</th>
							<th className='grid-th'>Ï∂îÏßÑÎπÑ</th>
							<th className='grid-th'>Ïù∏ÏÇ¨/Î≥µÎ¶¨</th>
						</tr>
					</thead>
					<tbody>
						{userData && userData.length > 0
							? userData.map((user, idx) => (
									<tr
										key={user.empNo}
										className={`grid-tr ${selectedUser?.empNo === user.empNo ? "selected" : ""}`}
										onClick={() => handleUserSelect(user)}
										style={{ cursor: "pointer" }}
									>
										<td className='grid-td'>{user.empNo}</td>
										<td className='grid-td'>{user.empNm}</td>
										<td className='grid-td'>{user.hqDivNm}</td>
										<td className='grid-td'>{user.deptDivNm}</td>
										<td className='grid-td'>{user.dutyNm}</td>
										<td className='grid-td'>{user.dutyDivCdNm}</td>
										<td className='grid-td'>{user.authCdNm}</td>
										<td className='grid-td'>{user.usrRoleId}</td>
										<td className='grid-td'>{user.usrRoleNm}</td>
										<td className='grid-td'>{user.apvApofNm}</td>
										<td className='grid-td text-center'>
											<input
												type='checkbox'
												checked={user.bsnUseYn === "1"}
												readOnly
											/>
										</td>
										<td className='grid-td text-center'>
											<input
												type='checkbox'
												checked={user.wpcUseYn === "1"}
												readOnly
											/>
										</td>
										<td className='grid-td text-center'>
											<input
												type='checkbox'
												checked={user.psmUseYn === "1"}
												readOnly
											/>
										</td>
									</tr>
								))
							: // Ï°∞Ìöå Í≤∞Í≥ºÍ∞Ä ÏóÜÏùÑ Îïå Îπà ÌñâÎì§ÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ ÎÜíÏù¥ Ïú†ÏßÄ
								Array.from({ length: 15 }, (_, idx) => (
									<tr key={`empty-${idx}`} className='grid-tr'>
										<td className='grid-td' colSpan={13}>
											&nbsp;
										</td>
									</tr>
								))}
					</tbody>
				</table>
			</div>

			{/* ÌïòÎã®: Îì±Î°ù/ÏàòÏ†ï ÏòÅÏó≠Í≥º ÏóÖÎ¨¥Í∂åÌïú ÌÖåÏù¥Î∏îÏùÑ Í∞ÄÎ°ú Î∞∞Ïπò */}
			<div className='flex gap-4 items-start'>
				{/* ÏôºÏ™Ω: ÏóÖÎ¨¥Í∂åÌïú ÌÉÄÏù¥ÌãÄ + ÌÖåÏù¥Î∏î */}
				<div className='w-[30%]'>
					<div className='tit_area'>
						<h2>ÏóÖÎ¨¥Î≥Ñ ÏÇ¨Ïö©Í∂åÌïú</h2>
					</div>
					<div className='gridbox-div'>
						<table className='grid-table'>
							<thead>
								<tr>
									<th className='grid-th'>ÏóÖÎ¨¥Íµ¨Î∂Ñ</th>
									<th className='grid-th w-[70px]'>ÏÇ¨Ïö©Í∂åÌïú</th>
									<th className='grid-th'>ÎπÑÍ≥†</th>
								</tr>
							</thead>
							<tbody>
								{workAuthList.map((task, idx) => (
									<tr className='grid-tr' key={idx}>
										<td className='grid-td'>{task.smlCsfNm}</td>
										<td className='grid-td text-center'>
											<input
												type='checkbox'
												checked={task.wrkUseYn === "1"}
												readOnly // ÏßÅÏ†ë ÏàòÏ†ï Î∞©ÏßÄ
											/>
										</td>
										<td className='grid-td'>{task.rmk}</td>
									</tr>
								))}
							</tbody>
						</table>
					</div>
				</div>

				{/* Ïò§Î•∏Ï™Ω: ÏÇ¨Ïö©Ïûê Îì±Î°ù Î∞è ÏàòÏ†ï */}
				<div className='flex-1'>
					<div className='tit_area'>
						<h2>ÏÇ¨Ïö©Ïûê Îì±Î°ù Î∞è ÏàòÏ†ï</h2>
					</div>
					<table className='form-table'>
						<tbody>
							<tr className='form-tr'>
								<th className='form-th w-[80px]'>ÏÇ¨Î≤à</th>
								<td className='form-td w-[200px]'>
									<input
										name='empNo'
										value={formData.empNo}
										readOnly
										type='text'
										className='input-base input-default'
										id='empNo'
									/>
								</td>
								<th className='form-th w-[80px]'>ÏÑ±Î™Ö</th>
								<td className='form-td !w-[150px]'>
									<input
										name='empNm'
										value={formData.empNm}
										readOnly
										type='text'
										className='input-base input-default'
										id='empNm'
									/>
								</td>
							</tr>
							<tr className='form-tr'>
								<th className='form-th'>ÏÇ¨Ïö©ÏûêÍ∂åÌïú</th>
								<td className='form-td'>
									<select
										name='authCd'
										value={editedUser?.authCd || ""}
										onChange={handleUserInputChange}
										className='combo-base'
										id='authCd'
									>
										<option value=''>ÏÑ†ÌÉù</option>
										{authCodeList.map((code) => (
											<option key={code.data} value={code.data}>
												{code.label}
											</option>
										))}
									</select>
								</td>
								<th className='form-th'>ÏßÅÏ±ÖÍµ¨Î∂Ñ</th>
								<td className='form-td'>
									<select
										name='dutyDivCd'
										value={editedUser?.dutyDivCd || ""}
										onChange={handleUserInputChange}
										className='combo-base'
										id='dutyDivCd'
									>
										<option value=''>ÏÑ†ÌÉù</option>
										{dutyDivCodeList.map((code) => (
											<option key={code.data} value={code.data}>
												{code.label}
											</option>
										))}
									</select>
								</td>
							</tr>
							<tr className='form-tr'>
								<th className='form-th'>ÏäπÏù∏Í≤∞Ïû¨Ïûê</th>
								<td className='form-td'>
									<div className='flex items-center'>
										<input
											name='apvApofNm'
											value={editedUser?.apvApofNm || ""}
											onChange={handleUserInputChange}
											className='input-base input-default'
											id='apvApofNm'
											placeholder='ÏäπÏù∏Í≤∞Ïû¨ÏûêÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî'
										/>
									</div>
								</td>
								<th className='form-th'>ÏÇ¨Ïö©ÏûêÏó≠Ìï†</th>
								<td className='form-td'>
									<select
										name='usrRoleId'
										value={editedUser?.usrRoleId || ""}
										onChange={handleUserInputChange}
										className='combo-base'
										id='usrRoleId'
									>
										<option value=''>ÏÑ†ÌÉù</option>
										{userRoleList.map((role) => (
											<option key={role.usrRoleId} value={role.usrRoleId}>
												{role.usrRoleNm}
											</option>
										))}
									</select>
								</td>
							</tr>
							<tr className='form-tr'>
								<th className='form-th'>ÏóÖÎ¨¥Í∂åÌïú</th>
								<td className='form-td' colSpan={3}>
									<div className='flex items-center gap-2 text-sm leading-none'>
										<select
											className='combo-base !w-[200px]'
											value={selectedWorkAuthCode}
											onChange={(e) => {
												console.log("üîç ÏóÖÎ¨¥Í∂åÌïú ÏΩ§Î≥¥ Î≥ÄÍ≤Ω:", e.target.value);
												setSelectedWorkAuthCode(e.target.value);
											}}
											id='workAuth'
										>
											<option value=''>== ÏÑ†ÌÉù ==</option>
											{workAuthList.map((auth) => (
												<option key={auth.smlCsfCd} value={auth.smlCsfCd}>
													{auth.smlCsfNm}
												</option>
											))}
										</select>
										<label htmlFor='workAuthAction_1'>
											<input
												id='workAuthAction_1'
												type='radio'
												name='workAuthAction'
												value='1'
												checked={workAuthAction === "1"}
												onChange={(e) => {
													const value = e.target.value as "1";
													console.log("üîç Î∂ÄÏó¨ ÎùºÎîîÏò§ Î≤ÑÌäº Î≥ÄÍ≤Ω:", value);
													setWorkAuthAction(value);
													// Ï¶âÏãú ÏóÖÎ¨¥Í∂åÌïú Î≥ÄÍ≤Ω Ï†ÅÏö©
													if (selectedWorkAuthCode) {
														handleWorkAuthChange(value);
													}
												}}
											/>{" "}
											Î∂ÄÏó¨
										</label>
										<label htmlFor='workAuthAction_0'>
											<input
												id='workAuthAction_0'
												type='radio'
												name='workAuthAction'
												value='0'
												checked={workAuthAction === "0"}
												onChange={(e) => {
													const value = e.target.value as "0";
													console.log("üîç Ìï¥Ï†ú ÎùºÎîîÏò§ Î≤ÑÌäº Î≥ÄÍ≤Ω:", value);
													setWorkAuthAction(value);
													// Ï¶âÏãú ÏóÖÎ¨¥Í∂åÌïú Î≥ÄÍ≤Ω Ï†ÅÏö©
													if (selectedWorkAuthCode) {
														handleWorkAuthChange(value);
													}
												}}
											/>{" "}
											Ìï¥Ï†ú
										</label>
									</div>
								</td>
							</tr>
						</tbody>
					</table>

					{/* ÌïòÎã® Î≤ÑÌäº ÏòÅÏó≠ */}
					<div className='flex justify-end mt-4'>
						<button
							onClick={handlePasswordReset}
							className='btn-base btn-etc mr-2'
						>
							ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî
						</button>
						<button onClick={handleSave} className='btn-base btn-act'>
							Ï†ÄÏû•
						</button>
					</div>
				</div>
			</div>
		</div>
	);
};

export default USR2010M00;
