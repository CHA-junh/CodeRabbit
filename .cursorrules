{
	"title": "NestJS + Next.js Monorepo Rules",
	"description": "Best practice rules for a fullstack monorepo project using TurboRepo, NestJS, and Next.js with modern UI libraries.",
	"rules": [
		{
			"name": "Monorepo Structure",
			"details": [
				"Use TurboRepo for managing multiple apps and packages in a monorepo setup.",
				"Organize project into separate directories: apps/ (e.g. web, api) and packages/ (e.g. ui, config, utils).",
				"Share common scripts and settings across workspaces using turbo.json and package.json.",
				"Manage environment variables using dotenv (.env files) scoped to each app.",
				"Implement code splitting and lazy loading where appropriate.",
				"Optimize images using Next.js Image component or a CDN.",
				"Centralize error handling with boundary components or global middleware.",
				"Log errors and events consistently using a unified logging system (e.g., Winston or Pino)."
			]
		},
		{
			"name": "NestJS Backend Best Practices",
			"details": [
				"Use camelCase for variables and functions, kebab-case for file and folder names.",
				"Use UPPERCASE for environment variables.",
				"Avoid magic numbers and hardcoded strings; define constants and enums in a separate file.",
				"Add JSDoc comments for all exported functions and public methods.",
				"Structure the application using modular architecture (Modules, Controllers, Services, DTOs).",
				"Handle exceptions globally using filters (e.g., HttpExceptionFilter).",
				"Validate all incoming requests using class-validator and pipes.",
				"Keep each controller focused on a single resource or responsibility."
			]
		},
		{
			"name": "Next.js + React Frontend Best Practices",
			"details": [
				"Use functional components and prefer TypeScript interfaces for props.",
				"Avoid using enums in favor of union string literals when possible.",
				"Follow a consistent file and folder structure (e.g., components/, pages/, hooks/, utils/).",
				"Use the app directory with React Server Components (RSC) if possible.",
				"Implement dynamic imports and Suspense for performance optimization.",
				"Use TailwindCSS for all styling purposes; avoid traditional CSS/SASS unless required.",
				"Utilize Shadcn UI components for consistent design system with accessibility built-in.",
				"Use Radix UI for complex UI primitives like dialogs, tooltips, dropdowns with full accessibility.",
				"Name files clearly (e.g., useButton.tsx, userForm.tsx) and colocate styles with components."
			]
		}
	]
}
