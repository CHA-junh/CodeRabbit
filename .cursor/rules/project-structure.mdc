---
alwaysApply: true
---

# BIST_NEW 프로젝트 규칙

이 문서는 BIST_NEW 프로젝트의 전반적인 규칙, 프론트엔드 규칙, 백엔드 규칙을 정의합니다. 모든 팀원은 프로젝트의 일관성과 품질을 유지하기 위해 이 규칙을 숙지하고 준수해야 합니다.

## 1. 전체 프로젝트 규칙 (Monorepo)

모노레포 구조와 관련된 전반적인 규칙입니다.

### 1.1. 기술 스택 및 구조

- **모노레포 관리**: [Turborepo](https://turborepo.org/)를 사용하여 워크스페이스 구조와 스크립트를 관리하고 공유합니다.
- **디렉터리 구조**:
  - `apps`: 각 애플리케이션(예: `client`, `server`)이 위치합니다.
  - `packages`: 여러 애플리케이션에서 공유하는 코드(예: UI 컴포넌트, 유틸리티 함수)가 위치합니다.
- **환경 변수**:
  - `.env` 파일을 사용하여 환경 변수를 관리합니다.
  - 환경 변수 이름은 `UPPERCASE_SNAKE_CASE`로 작성합니다.
  - `.env.example` 파일을 제공하여 필요한 환경 변수 목록을 공유합니다.
- **공통 구성**: ESLint, Prettier, TypeScript 등 공통 설정을 `packages` 디렉터리 내의 `config` 패키지에서 관리합니다.

### 1.2. 개발 전략

- **코드 스플리팅**: 애플리케이션 성능 향상을 위해 적절한 코드 스플리팅 전략을 사용합니다.
- **이미지 최적화**: `next/image` 등과 같은 도구를 활용하여 이미지를 최적화합니다.
- **에러 핸들링**: 전역 에러 핸들링 및 로깅 전략을 수립하여 예상치 못한 오류에 대응합니다.
- **로깅**: 프로덕션 환경에서의 디버깅 및 모니터링을 위해 체계적인 로깅 시스템을 구축합니다.

---

## 2. 프론트엔드 규칙 (Next.js & React)

`apps/client` 디렉터리에 적용되는 규칙입니다.

### 2.1. 컴포넌트 및 상태 관리

- **함수형 컴포넌트**: 모든 React 컴포넌트는 함수형 컴포넌트와 Hooks를 사용하여 작성합니다.
- **타입스크립트**:
  - `interface`를 사용하여 props와 객체의 타입을 정의합니다.
  - `enum` 대신 `union type` 사용을 지향합니다. (예: `type Status = 'loading' | 'success' | 'error';`)
- **React Server Components (RSC)**: Next.js 13+의 App Router를 기반으로 서버 컴포넌트 중심의 설계를 지향하여 성능을 최적화합니다.

### 2.2. 네이밍 및 구조

- **파일/디렉터리 네이밍**:
  - 컴포넌트 파일: `PascalCase.tsx` (예: `MyComponent.tsx`)
  - 페이지/라우트 파일: `kebab-case.tsx` 또는 Next.js 라우팅 규칙을 따릅니다.
  - 디렉터리: `kebab-case`
- **모듈화**: 기능별로 디렉터리를 구성하여 관련 코드(컴포넌트, 훅, 타입 등)를 함께 관리합니다. (예: `src/modules/auth`)

### 2.3. UI 및 최적화

- **UI 라이브러리**: [Tailwind CSS](https://tailwindcss.com/), [shadcn/ui](https://ui.shadcn.com/), [Radix UI](https://www.radix-ui.com/)를 적극적으로 활용합니다.
- **성능 최적화**:
  - **Dynamic Import**: 초기 로딩 속도 개선을 위해 `next/dynamic`을 사용한 동적 임포트를 적용합니다.
  - **Suspense**: 데이터 로딩 중 fallback UI를 보여주기 위해 `Suspense`를 활용합니다.
  - **이미지 최적화**: `next/image`를 사용하여 이미지를 최적화합니다.

---

## 3. 백엔드 규칙 (NestJS)

`apps/server` 디렉터리에 적용되는 규칙입니다.

### 3.1. 네이밍 및 코딩 스타일

- **네이밍 컨벤션**:
  - 변수, 함수, 클래스 멤버: `camelCase`
  - 파일 이름: `kebab-case.ts` (예: `user.service.ts`)
  - 환경 변수: `UPPERCASE_SNAKE_CASE`
- **타입 선언**: 모든 변수, 함수 반환값, 파라미터에 명시적인 타입을 선언합니다.
- **JSDoc**: 복잡한 로직이나 공개 API에 대해서는 JSDoc을 사용하여 설명을 추가합니다.
- **Magic Number**: 의미를 알 수 없는 숫자(Magic Number)를 직접 사용하지 않고, 의미 있는 상수로 정의하여 사용합니다.

### 3.2. 아키텍처

- **모듈화**: 기능별로 모듈(`*.module.ts`)을 분리하여 의존성을 관리합니다. (Controller, Service, Provider 구조)
- **클래스 설계**: SOLID 원칙을 고려하여 클래스를 설계하고, 의존성 주입(DI)을 적극 활용합니다.
- **함수 구조**: 함수는 하나의 기능만 수행하도록 작고 명확하게 작성합니다.
- **예외 처리**:
  - NestJS의 내장 예외 필터를 활용하여 일관된 에러 응답 형식을 유지합니다.
  - 비즈니스 로직 상 예상 가능한 예외는 커스텀 예외 클래스를 정의하여 처리합니다.
